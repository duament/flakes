From 5e9987d1e1b74d194230b9440f056b569877163a Mon Sep 17 00:00:00 2001
From: Rvfg <i@rvf6.com>
Date: Wed, 11 Oct 2023 17:41:05 +0800
Subject: [PATCH] Add cgroup2 in windowrulev2

---
 src/Window.hpp                |  1 +
 src/config/ConfigManager.cpp  | 19 ++++++++++++++++++-
 src/helpers/MiscFunctions.cpp | 35 +++++++++++++++++++++++++++++++++++
 src/helpers/MiscFunctions.hpp |  1 +
 4 files changed, 55 insertions(+), 1 deletion(-)

diff --git a/src/Window.hpp b/src/Window.hpp
index 81b6156f47..8189805319 100644
--- a/src/Window.hpp
+++ b/src/Window.hpp
@@ -152,6 +152,7 @@ struct SWindowRule {
     int         bFullscreen = -1;
     int         bPinned     = -1;
     std::string szWorkspace = ""; // empty means any
+    std::string szCgroup2;
 };
 
 class CWindow {
diff --git a/src/config/ConfigManager.cpp b/src/config/ConfigManager.cpp
index 1e7d8177ec..8b333b5f3e 100644
--- a/src/config/ConfigManager.cpp
+++ b/src/config/ConfigManager.cpp
@@ -992,9 +992,10 @@ void CConfigManager::handleWindowRuleV2(const std::string& command, const std::s
     const auto FULLSCREENPOS = VALUE.find("fullscreen:");
     const auto PINNEDPOS     = VALUE.find("pinned:");
     const auto WORKSPACEPOS  = VALUE.find("workspace:");
+    const auto CGROUP2POS    = VALUE.find("cgroup2:");
 
     if (TITLEPOS == std::string::npos && CLASSPOS == std::string::npos && X11POS == std::string::npos && FLOATPOS == std::string::npos && FULLSCREENPOS == std::string::npos &&
-        PINNEDPOS == std::string::npos && WORKSPACEPOS == std::string::npos) {
+        PINNEDPOS == std::string::npos && WORKSPACEPOS == std::string::npos && CGROUP2POS == std::string::npos) {
         Debug::log(ERR, "Invalid rulev2 syntax: {}", VALUE);
         parseError = "Invalid rulev2 syntax: " + VALUE;
         return;
@@ -1019,6 +1020,8 @@ void CConfigManager::handleWindowRuleV2(const std::string& command, const std::s
             min = PINNEDPOS;
         if (WORKSPACEPOS > pos && WORKSPACEPOS < min)
             min = PINNEDPOS;
+        if (CGROUP2POS > pos && CGROUP2POS < min)
+            min = CGROUP2POS;
 
         result = result.substr(0, min - pos);
 
@@ -1051,6 +1054,9 @@ void CConfigManager::handleWindowRuleV2(const std::string& command, const std::s
     if (WORKSPACEPOS != std::string::npos)
         rule.szWorkspace = extract(WORKSPACEPOS + 10);
 
+    if (CGROUP2POS != std::string::npos)
+        rule.szCgroup2 = extract(CGROUP2POS + 8);
+
     if (RULE == "unset") {
         std::erase_if(m_dWindowRules, [&](const SWindowRule& other) {
             if (!other.v2) {
@@ -1077,6 +1083,9 @@ void CConfigManager::handleWindowRuleV2(const std::string& command, const std::s
                 if (!rule.szWorkspace.empty() && rule.szWorkspace != other.szWorkspace)
                     return false;
 
+                if (!rule.szCgroup2.empty() && rule.szCgroup2 != other.szCgroup2)
+                    return false;
+
                 return true;
             }
         });
@@ -1901,6 +1910,14 @@ std::vector<SWindowRule> CConfigManager::getMatchingRules(CWindow* pWindow) {
                             continue;
                     }
                 }
+
+                if (rule.szCgroup2 != "") {
+                    std::regex RULECHECK(rule.szCgroup2);
+                    std::string PCGROUP2 = getCgroup2of(pWindow->getPID());
+
+                    if (!std::regex_search(PCGROUP2, RULECHECK))
+                        continue;
+                }
             } catch (std::exception& e) {
                 Debug::log(ERR, "Regex error at {} ({})", rule.szValue, e.what());
                 continue;
diff --git a/src/helpers/MiscFunctions.cpp b/src/helpers/MiscFunctions.cpp
index e54e93ac5e..4997c6f2f7 100644
--- a/src/helpers/MiscFunctions.cpp
+++ b/src/helpers/MiscFunctions.cpp
@@ -625,6 +625,41 @@ int64_t getPPIDof(int64_t pid) {
 #endif
 }
 
+std::string getCgroup2of(int64_t pid) {
+    std::string       dir     = "/proc/" + std::to_string(pid) + "/cgroup";
+    FILE*             infile;
+
+    infile = fopen(dir.c_str(), "r");
+    if (!infile)
+        return {};
+
+    char*       line = nullptr;
+    size_t      len  = 0;
+    ssize_t     len2 = 0;
+
+    std::string cgroup2;
+
+    while ((len2 = getline(&line, &len, infile)) != -1) {
+        if (len2 > 0 && line[0] == '0') {
+            std::string linestr;
+            if (line[len2 - 1] == '\n')
+                linestr = std::string(line, len2 - 1);
+            else
+                linestr = std::string(line, len2);
+            const auto colonpos = linestr.find_last_of(':');
+            if (colonpos != std::string::npos && colonpos != len2 - 1)
+                cgroup2 = linestr.substr(colonpos + 1);
+            break;
+        }
+    }
+
+    fclose(infile);
+    if (line)
+        free(line);
+
+    return cgroup2;
+}
+
 int64_t configStringToInt(const std::string& VALUE) {
     if (VALUE.find("0x") == 0) {
         // Values with 0x are hex
diff --git a/src/helpers/MiscFunctions.hpp b/src/helpers/MiscFunctions.hpp
index 429f381f39..6dac0d34da 100644
--- a/src/helpers/MiscFunctions.hpp
+++ b/src/helpers/MiscFunctions.hpp
@@ -24,6 +24,7 @@ float                            vecToRectDistanceSquared(const Vector2D& vec, c
 void                             logSystemInfo();
 std::string                      execAndGet(const char*);
 int64_t                          getPPIDof(int64_t pid);
+std::string                      getCgroup2of(int64_t pid);
 int64_t                          configStringToInt(const std::string&);
 float                            getPlusMinusKeywordResult(std::string in, float relative);
 void                             matrixProjection(float mat[9], int w, int h, wl_output_transform tr);
