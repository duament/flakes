From ef4ebbfbedc3057ab8afbdb31e456a26985388a3 Mon Sep 17 00:00:00 2001
From: Rvfg <i@rvf6.com>
Date: Wed, 11 Oct 2023 17:41:05 +0800
Subject: [PATCH] Add cgroup2 in windowrulev2

---
 src/config/ConfigManager.cpp  | 19 +++++++++++++++++-
 src/desktop/Window.hpp        |  1 +
 src/helpers/MiscFunctions.cpp | 37 ++++++++++++++++++++++++++++++++++-
 src/helpers/MiscFunctions.hpp |  3 ++-
 4 files changed, 57 insertions(+), 3 deletions(-)

diff --git a/src/config/ConfigManager.cpp b/src/config/ConfigManager.cpp
index df2006ae..19d1a53a 100644
--- a/src/config/ConfigManager.cpp
+++ b/src/config/ConfigManager.cpp
@@ -1081,6 +1081,14 @@ std::vector<SWindowRule> CConfigManager::getMatchingRules(CWindow* pWindow, bool
                             continue;
                     }
                 }
+
+                if (rule.szCgroup2 != "") {
+                    std::regex RULECHECK(rule.szCgroup2);
+                    std::string PCGROUP2 = getCgroup2of(pWindow->getPID());
+
+                    if (!std::regex_search(PCGROUP2, RULECHECK))
+                        continue;
+                }
             } catch (std::exception& e) {
                 Debug::log(ERR, "Regex error at {} ({})", rule.szValue, e.what());
                 continue;
@@ -1994,6 +2002,7 @@ std::optional<std::string> CConfigManager::handleWindowRuleV2(const std::string&
     const auto PINNEDPOS       = VALUE.find("pinned:");
     const auto FOCUSPOS        = VALUE.find("focus:");
     const auto ONWORKSPACEPOS  = VALUE.find("onworkspace:");
+    const auto CGROUP2POS      = VALUE.find("cgroup2:");
 
     // find workspacepos that isn't onworkspacepos
     size_t WORKSPACEPOS = std::string::npos;
@@ -2008,7 +2017,7 @@ std::optional<std::string> CConfigManager::handleWindowRuleV2(const std::string&
 
     if (TITLEPOS == std::string::npos && CLASSPOS == std::string::npos && INITIALTITLEPOS == std::string::npos && INITIALCLASSPOS == std::string::npos &&
         X11POS == std::string::npos && FLOATPOS == std::string::npos && FULLSCREENPOS == std::string::npos && PINNEDPOS == std::string::npos && WORKSPACEPOS == std::string::npos &&
-        FOCUSPOS == std::string::npos && ONWORKSPACEPOS == std::string::npos) {
+        FOCUSPOS == std::string::npos && ONWORKSPACEPOS == std::string::npos && CGROUP2POS == std::string::npos) {
         Debug::log(ERR, "Invalid rulev2 syntax: {}", VALUE);
         return "Invalid rulev2 syntax: " + VALUE;
     }
@@ -2040,6 +2049,8 @@ std::optional<std::string> CConfigManager::handleWindowRuleV2(const std::string&
             min = WORKSPACEPOS;
         if (FOCUSPOS > pos && FOCUSPOS < min)
             min = FOCUSPOS;
+        if (CGROUP2POS > pos && CGROUP2POS < min)
+            min = CGROUP2POS;
 
         result = result.substr(0, min - pos);
 
@@ -2084,6 +2095,9 @@ std::optional<std::string> CConfigManager::handleWindowRuleV2(const std::string&
     if (ONWORKSPACEPOS != std::string::npos)
         rule.szOnWorkspace = extract(ONWORKSPACEPOS + 12);
 
+    if (CGROUP2POS != std::string::npos)
+        rule.szCgroup2 = extract(CGROUP2POS + 8);
+
     if (RULE == "unset") {
         std::erase_if(m_dWindowRules, [&](const SWindowRule& other) {
             if (!other.v2) {
@@ -2122,6 +2136,9 @@ std::optional<std::string> CConfigManager::handleWindowRuleV2(const std::string&
                 if (!rule.szOnWorkspace.empty() && rule.szOnWorkspace != other.szOnWorkspace)
                     return false;
 
+                if (!rule.szCgroup2.empty() && rule.szCgroup2 != other.szCgroup2)
+                    return false;
+
                 return true;
             }
         });
diff --git a/src/desktop/Window.hpp b/src/desktop/Window.hpp
index bc1820a0..70871e42 100644
--- a/src/desktop/Window.hpp
+++ b/src/desktop/Window.hpp
@@ -182,6 +182,7 @@ struct SWindowRule {
     int         bFocus        = -1;
     std::string szOnWorkspace = ""; // empty means any
     std::string szWorkspace   = ""; // empty means any
+    std::string szCgroup2;
 };
 
 class CWindow {
diff --git a/src/helpers/MiscFunctions.cpp b/src/helpers/MiscFunctions.cpp
index 2b83832c..db419086 100644
--- a/src/helpers/MiscFunctions.cpp
+++ b/src/helpers/MiscFunctions.cpp
@@ -682,6 +682,41 @@ int64_t getPPIDof(int64_t pid) {
 #endif
 }
 
+std::string getCgroup2of(int64_t pid) {
+    std::string       dir     = "/proc/" + std::to_string(pid) + "/cgroup";
+    FILE*             infile;
+
+    infile = fopen(dir.c_str(), "r");
+    if (!infile)
+        return {};
+
+    char*       line = nullptr;
+    size_t      len  = 0;
+    ssize_t     len2 = 0;
+
+    std::string cgroup2;
+
+    while ((len2 = getline(&line, &len, infile)) != -1) {
+        if (len2 > 0 && line[0] == '0') {
+            std::string linestr;
+            if (line[len2 - 1] == '\n')
+                linestr = std::string(line, len2 - 1);
+            else
+                linestr = std::string(line, len2);
+            const auto colonpos = linestr.find_last_of(':');
+            if (colonpos != std::string::npos && colonpos != len2 - 1)
+                cgroup2 = linestr.substr(colonpos + 1);
+            break;
+        }
+    }
+
+    fclose(infile);
+    if (line)
+        free(line);
+
+    return cgroup2;
+}
+
 int64_t configStringToInt(const std::string& VALUE) {
     if (VALUE.starts_with("0x")) {
         // Values with 0x are hex
@@ -831,4 +866,4 @@ bool envEnabled(const std::string& env) {
     if (!ENV)
         return false;
     return std::string(ENV) == "1";
-}
\ No newline at end of file
+}
diff --git a/src/helpers/MiscFunctions.hpp b/src/helpers/MiscFunctions.hpp
index d8a86b95..fc43fa4f 100644
--- a/src/helpers/MiscFunctions.hpp
+++ b/src/helpers/MiscFunctions.hpp
@@ -27,6 +27,7 @@ float                            vecToRectDistanceSquared(const Vector2D& vec, c
 void                             logSystemInfo();
 std::string                      execAndGet(const char*);
 int64_t                          getPPIDof(int64_t pid);
+std::string                      getCgroup2of(int64_t pid);
 int64_t                          configStringToInt(const std::string&);
 Vector2D                         configStringToVector2D(const std::string&);
 std::optional<float>             getPlusMinusKeywordResult(std::string in, float relative);
@@ -45,4 +46,4 @@ template <typename... Args>
     // because any suck format specifier will cause a compilation error
     // this is actually what std::format in stdlib does
     return std::vformat(fmt.get(), std::make_format_args(args...));
-}
\ No newline at end of file
+}
-- 
2.44.0

